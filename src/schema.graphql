# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TestPreset {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  type: TestType
  language: TestLanguage
  time: Int
  words: Int
  punctuated: Boolean
  creatorImage: String
  userId: String
  creator: User!
}

"""Date custom scalar type"""
scalar Date

"""Test Type"""
enum TestType {
  WORDS
  TIME
}

"""Test Language"""
enum TestLanguage {
  ENGLISH
  SPANISH
}

type UserOnUser {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  child: User
  childId: String
  parent: User
  parentId: String
}

type TestPresetHistory {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: String!
  testPresetId: String!
  wpm: Float!
  cpm: Float!
  accuracy: Float!
  keystrokes: Float!
  correctChars: Float!
  incorrectChars: Float!
}

type User {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  username: String
  oauthId: String
  description: String
  avatar: String
  country: String
  badge: UserBadge
  authProvider: AuthProvider
  followedBy: [UserOnUser!]
  following: [UserOnUser!]
  testPresetHistory: [TestPresetHistory!]
  testPresets: [TestPreset!]
}

"""User Badges"""
enum UserBadge {
  DEFAULT
  TESTER
  PRO
}

"""User auth provider service"""
enum AuthProvider {
  DEFAULT
  DISCORD
  GITHUB
  GOOGLE
}

type ErrorResponse {
  field: String!
  message: String!
}

type UserResponse {
  user: User
  errors: [ErrorResponse!]
}

type UsersResponse {
  users: [User!]
  errors: [ErrorResponse!]
}

type FilteredUser {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  username: String!
  avatar: String!
  authProvider: AuthProvider
  oauthId: String
  country: String!
  value: Float!
}

type FilteredUsersResponse {
  nodes: [FilteredUser!]
  nodeCount: Int
  pageCount: Int
  currentPage: Int
  nodesPerPage: Int
  hasMore: Boolean
  errors: [ErrorResponse!]
}

type FollowUserStatusResponse {
  status: FollowStatus
  errors: [ErrorResponse!]
}

"""Status of the follow request"""
enum FollowStatus {
  NOTSENT
  PENDING
  ACCEPTED
  REJECTED
}

type UserFollower {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  username: String!
  avatar: String!
  authProvider: AuthProvider
  oauthId: String
  status: FollowStatus
}

type UserFollowerEdge {
  cursor: Date
  node: UserFollower
}

type UserFollowersPageInfo {
  startCursor: Date
  endCursor: Date
  hasMore: Boolean
}

type UserFollowersResponse {
  count: Int
  acceptedRequests: Int
  pendingRequests: Int
  pageInfo: UserFollowersPageInfo
  edges: [UserFollowerEdge!]
  errors: [ErrorResponse!]
}

type RequestFollowUserResponse {
  requestSent: Boolean
  errors: [ErrorResponse!]
}

type UnfollowUserResponse {
  unfollow: Boolean
  errors: [ErrorResponse!]
}

type AcceptFollowRequestResponse {
  accepted: Boolean
  errors: [ErrorResponse!]
}

type DenyFollowRequestResponse {
  denied: Boolean
  errors: [ErrorResponse!]
}

type TestPresetResponse {
  testPreset: TestPreset
  errors: [ErrorResponse!]
}

type TestPresetsEdge {
  cursor: Date
  node: TestPreset
}

type TestPresetsPageInfo {
  startCursor: Date
  endCursor: Date
  hasMore: Boolean
}

type TestPresetsResponse {
  count: Int
  pageInfo: TestPresetsPageInfo
  edges: [TestPresetsEdge!]
  errors: [ErrorResponse!]
}

type TestPresetHistoryResponse {
  testPresetHistory: TestPresetHistory
  errors: [ErrorResponse!]
}

type UserSettings {
  id: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date!
  userId: String
  blindMode: Boolean
  pauseOnError: Boolean
  noBackspace: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float
}

type UserSettingsResponse {
  userSettings: UserSettings
  errors: [ErrorResponse!]
}

type Query {
  me: UserResponse!
  user(where: UserWhereInput!): UserResponse!
  users(take: Int!): UsersResponse!
  filterUsers(filterBy: UserFilterBy!, page: Int!): FilteredUsersResponse!
  userFollowers(input: UserFollowersFindInput!): UserFollowersResponse!
  followUserStatus(followerId: String!, userId: String!): FollowUserStatusResponse!
  userSettings(input: UserSettingsWhereInput!): UserSettingsResponse!
  testPreset(id: String!): TestPresetResponse!
  testPresets(input: TestPresetsFindInput): TestPresetsResponse!
  userTestPresets(userId: String!): TestPresetsResponse!
}

input UserWhereInput {
  id: String
  username: String
}

"""Fields to filter Users By"""
enum UserFilterBy {
  WPM
  CPM
  ACCURACY
  KEYSTROKES
  TESTSCOMPLETED
}

input UserFollowersFindInput {
  skip: Int!
  take: Int!
  where: UserWhereInput
}

input UserSettingsWhereInput {
  id: String
  userId: String
}

input TestPresetsFindInput {
  skip: Int!
  take: Int!
  where: TestPresetWhereInput
}

input TestPresetWhereInput {
  id: String
  type: TestType
  language: TestLanguage
  time: Int
  words: Int
  punctuated: Boolean
}

type Mutation {
  logout: Boolean!
  updateUser(data: UserUpdateInput!, where: UserWhereInput!): UserResponse!
  requestFollowUser(followerId: String!, userId: String!): RequestFollowUserResponse!
  acceptFollowRequest(followerId: String!, userId: String!): AcceptFollowRequestResponse!
  denyFollowRequest(followerId: String!, userId: String!): DenyFollowRequestResponse!
  unfollowUser(followerId: String!, userId: String!): UnfollowUserResponse!
  createUserSettings(input: UserSettingsCreateInput!): UserSettingsResponse!
  updateUserSettings(input: UserSettingsUpdateInput!): UserSettingsResponse!
  createTestPreset(data: CreateTestPresetInput!): TestPresetResponse!
  createTestPresetUser(data: CreateTestPresetInput!): TestPresetResponse!
  createTestPresetHistoryEntry(input: CreateTestPresetHistoryInput!): TestPresetHistoryResponse!
  userCreateTestPresetHistoryEntry(input: CreateTestPresetHistoryInput!, userId: String!): TestPresetHistoryResponse!
}

input UserUpdateInput {
  name: String
  description: String
  email: String
  image: String
  country: String
  badge: UserBadge
  keystrokes: InputUpdateInput
  testsCompleted: InputUpdateInput
  wordsWritten: InputUpdateInput
  wordsPerMinute: WordsPerMinuteCreateInput
  charsPerMinute: CharsPerMinuteCreateInput
  accuracy: AccuracyCreateInput
}

input InputUpdateInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input WordsPerMinuteCreateInput {
  id: String
  amount: Float
  createdAt: Date
  updatedAt: Date
}

input CharsPerMinuteCreateInput {
  id: String
  amount: Float
  createdAt: Date
  updatedAt: Date
}

input AccuracyCreateInput {
  id: String
  amount: Float
  createdAt: Date
  updatedAt: Date
}

input UserSettingsCreateInput {
  userId: String
  blindMode: Boolean
  pauseOnError: Boolean
  noBackspace: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float
}

input UserSettingsUpdateInput {
  userId: String
  blindMode: Boolean
  pauseOnError: Boolean
  noBackspace: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float
}

input CreateTestPresetInput {
  userId: String
  creatorImage: String
  type: TestType!
  language: TestLanguage!
  time: Int!
  words: Int!
  punctuated: Boolean!
}

input CreateTestPresetHistoryInput {
  userId: String!
  testPresetId: String!
  wpm: Float!
  cpm: Float!
  accuracy: Float!
  keystrokes: Float!
  correctChars: Float!
  incorrectChars: Float!
}
