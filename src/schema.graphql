# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AcceptFollowRequestResponse {
  accepted: Boolean
  errors: [ErrorResponse!]
}

input AccuracyCreateInput {
  amount: Float
  createdAt: Date
  id: String
  updatedAt: Date
}

"""User auth provider service"""
enum AuthProvider {
  DEFAULT
  DISCORD
  GITHUB
  GOOGLE
  LOCAL
}

"""Style of the Caret"""
enum CaretStyle {
  BLOCK
  HOLLOW
  LINE
}

input CharsPerMinuteCreateInput {
  amount: Float
  createdAt: Date
  id: String
  updatedAt: Date
}

input CopyPresetToUserInput {
  presetId: String!
  user: UserWhereInput!
}

input CreateTestPresetHistoryInput {
  accuracy: Float!
  correctChars: Float!
  cpm: Float!
  incorrectChars: Float!
  keystrokes: Float!
  testPresetId: String!
  userId: String!
  wpm: Float!
}

input CreateTestPresetInput {
  content: TestContent!
  creatorImage: String
  language: TestLanguage!
  punctuated: Boolean!
  time: Int!
  type: TestType!
  userId: String
  words: Int!
}

"""Date custom scalar type"""
scalar Date

type DenyFollowRequestResponse {
  denied: Boolean
  errors: [ErrorResponse!]
}

type ErrorResponse {
  field: String!
  message: String!
}

input FilterUsersInput {
  filterBy: UserFilterBy!
  skip: Int!
  take: Int!
  where: UserWhereInput
}

type FilteredUser {
  authProvider: AuthProvider
  avatar: String
  badge: UserBadge
  country: String

  """Identifies the date and time when the object was created."""
  createdAt: Date
  description: String
  followedBy: [UserOnUser!]
  following: [UserOnUser!]
  id: String!
  oauthId: String
  testPresetHistory: [TestPresetHistory!]
  testPresets: [TestPreset!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  username: String
  value: Float!
}

type FilteredUsersEdge {
  cursor: Date
  node: FilteredUser
}

type FilteredUsersPageInfo {
  endCursor: Date
  hasMore: Boolean
  startCursor: Date
}

type FilteredUsersResponse {
  count: Int
  edges: [FilteredUsersEdge!]
  errors: [ErrorResponse!]
  pageInfo: FilteredUsersPageInfo
}

"""Status of the follow request"""
enum FollowStatus {
  ACCEPTED
  NOTSENT
  PENDING
  REJECTED
}

type FollowUserStatusResponse {
  errors: [ErrorResponse!]
  status: FollowStatus
}

input InputUpdateInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

type Mutation {
  acceptFollowRequest(followerId: String!, userId: String!): AcceptFollowRequestResponse!
  copyPresetToUser(input: CopyPresetToUserInput!): TestPresetResponse!
  createTestPreset(data: CreateTestPresetInput!): TestPresetResponse!
  createTestPresetHistoryEntry(input: CreateTestPresetHistoryInput!): TestPresetHistoryResponse!
  createTestPresetUser(data: CreateTestPresetInput!): TestPresetResponse!
  createUserSettings(input: UserSettingsCreateInput!): UserSettingsResponse!
  denyFollowRequest(followerId: String!, userId: String!): DenyFollowRequestResponse!
  logout: Boolean!
  requestFollowUser(followerId: String!, userId: String!): RequestFollowUserResponse!
  unfollowUser(followerId: String!, userId: String!): UnfollowUserResponse!
  updateUser(data: UserUpdateInput!, where: UserWhereInput!): UserResponse!
  updateUserSettings(input: UserSettingsUpdateInput!): UserSettingsResponse!
  userCreateTestPresetHistoryEntry(input: CreateTestPresetHistoryInput!, userId: String!): TestPresetHistoryResponse!
}

type Query {
  filterUsers(input: FilterUsersInput!): FilteredUsersResponse!
  followUserStatus(followerId: String!, userId: String!): FollowUserStatusResponse!
  me: UserResponse!
  testPreset(id: String!): TestPresetResponse!
  testPresetAll: [TestPreset!]!
  testPresets(input: TestPresetsFindInput): TestPresetsResponse!
  user(where: UserWhereInput!): UserResponse!
  userFollowers(input: UserFollowersFindInput!): UserFollowersResponse!
  userSettings(input: UserSettingsWhereInput!): UserSettingsResponse!
  userTestPresets(input: UserTestPresetsInput!): TestPresetsResponse!
  userTestPresetsHistory(input: UserTestPresetsHistoryInput!): TestPresetsHistoryResponse!
  users(take: Int): UsersResponse!
}

type RequestFollowUserResponse {
  errors: [ErrorResponse!]
  requestSent: Boolean
}

"""Test Content"""
enum TestContent {
  QUOTE
  RANDOM
}

"""Test Language"""
enum TestLanguage {
  ENGLISH
  SPANISH
}

type TestPreset {
  content: TestContent

  """Identifies the date and time when the object was created."""
  createdAt: Date
  creator: User!
  creatorImage: String
  id: String!
  language: TestLanguage
  punctuated: Boolean
  time: Int
  type: TestType

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  userId: String
  words: Int
}

type TestPresetHistory {
  accuracy: Float!
  correctChars: Float!
  cpm: Float!

  """Identifies the date and time when the object was created."""
  createdAt: Date
  id: String!
  incorrectChars: Float!
  keystrokes: Float!
  testPresetId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  userId: String!
  wpm: Float!
}

type TestPresetHistoryResponse {
  errors: [ErrorResponse!]
  testPresetHistory: TestPresetHistory
}

type TestPresetResponse {
  errors: [ErrorResponse!]
  testPreset: TestPreset
}

input TestPresetWhereInput {
  content: TestContent
  id: String
  language: TestLanguage
  punctuated: Boolean
  time: Int
  type: TestType
  words: Int
}

type TestPresetsEdge {
  cursor: Date
  node: TestPreset
}

input TestPresetsFindInput {
  skip: Int!
  take: Int!
  where: TestPresetWhereInput
}

type TestPresetsHistoryResponse {
  errors: [ErrorResponse!]
  testPresetHistory: [TestPresetHistory!]
}

type TestPresetsPageInfo {
  endCursor: Date
  hasMore: Boolean
  startCursor: Date
}

type TestPresetsResponse {
  count: Int
  edges: [TestPresetsEdge!]
  errors: [ErrorResponse!]
  pageInfo: TestPresetsPageInfo
}

"""Test Type"""
enum TestType {
  TIME
  WORDS
}

type UnfollowUserResponse {
  errors: [ErrorResponse!]
  unfollow: Boolean
}

type User {
  authProvider: AuthProvider
  avatar: String
  badge: UserBadge
  country: String

  """Identifies the date and time when the object was created."""
  createdAt: Date
  description: String
  followedBy: [UserOnUser!]
  following: [UserOnUser!]
  id: String!
  oauthId: String
  testPresetHistory: [TestPresetHistory!]
  testPresets: [TestPreset!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  username: String
}

"""User Badges"""
enum UserBadge {
  DEFAULT
  PRO
  TESTER
}

"""Fields to filter Users By"""
enum UserFilterBy {
  ACCURACY
  CPM
  KEYSTROKES
  TESTSCOMPLETED
  WPM
}

type UserFollower {
  authProvider: AuthProvider
  avatar: String!

  """Identifies the date and time when the object was created."""
  createdAt: Date
  id: String!
  oauthId: String
  status: FollowStatus

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  username: String!
}

type UserFollowerEdge {
  cursor: Date
  node: UserFollower
}

input UserFollowersFindInput {
  skip: Int!
  take: Int!
  where: UserWhereInput
}

type UserFollowersPageInfo {
  endCursor: Date
  hasMore: Boolean
  startCursor: Date
}

type UserFollowersResponse {
  acceptedRequests: Int
  count: Int
  edges: [UserFollowerEdge!]
  errors: [ErrorResponse!]
  pageInfo: UserFollowersPageInfo
  pendingRequests: Int
}

type UserOnUser {
  child: User
  childId: String

  """Identifies the date and time when the object was created."""
  createdAt: Date
  id: String!
  parent: User
  parentId: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
}

type UserResponse {
  errors: [ErrorResponse!]
  user: User
}

type UserSettings {
  blindMode: Boolean
  caretColor: String
  caretStyle: CaretStyle

  """Identifies the date and time when the object was created."""
  createdAt: Date
  id: String!
  noBackspace: Boolean
  pauseOnError: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float

  """Identifies the date and time when the object was last updated."""
  updatedAt: Date
  userId: String
}

input UserSettingsCreateInput {
  blindMode: Boolean
  caretColor: String
  caretStyle: CaretStyle
  noBackspace: Boolean
  pauseOnError: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float
  userId: String!
}

type UserSettingsResponse {
  errors: [ErrorResponse!]
  userSettings: UserSettings
}

input UserSettingsUpdateInput {
  blindMode: Boolean
  caretColor: String
  caretStyle: CaretStyle
  noBackspace: Boolean
  pauseOnError: Boolean
  typeSounds: Boolean
  typeSoundsVolume: Float
  userId: String!
}

input UserSettingsWhereInput {
  id: String
  userId: String
  username: String
}

input UserTestPresetsHistoryInput {
  username: String
}

input UserTestPresetsInput {
  skip: Int!
  take: Int!
  username: String
}

input UserUpdateInput {
  accuracy: AccuracyCreateInput
  badge: UserBadge
  charsPerMinute: CharsPerMinuteCreateInput
  country: String
  description: String
  email: String
  image: String
  keystrokes: InputUpdateInput
  name: String
  testsCompleted: InputUpdateInput
  wordsPerMinute: WordsPerMinuteCreateInput
  wordsWritten: InputUpdateInput
}

input UserWhereInput {
  id: String
  username: String
}

type UsersResponse {
  errors: [ErrorResponse!]
  users: [User!]
}

input WordsPerMinuteCreateInput {
  amount: Float
  createdAt: Date
  id: String
  updatedAt: Date
}